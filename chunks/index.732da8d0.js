import{m as e}from"../index.f7c0c5b6.js";import"./time.daaab1ba.js";import{P as t}from"./index.ad101fb9.js";export default function(){return e`<${t} ...${{title:"Pass Parameters to the ExecutiveService Adapter",date:"2018-11-06 17:00:00"}}>
      <article dangerouslySetInnerHTML=${{__html:'<h2>\n  <a id="this-tip-shows-how-to-pass-pipeline-input-variables-to-an-code-executiveservice-code-adapter-in-webmethods-" class="anchor" aria-hidden="true" href="#this-tip-shows-how-to-pass-pipeline-input-variables-to-an-code-executiveservice-code-adapter-in-webmethods-">\n    <svg class="icon" viewBox="0 0 16 16" version="1.1" width="16" height="16" aria-hidden="true"><path fill-rule="evenodd" d="M7.775 3.275a.75.75 0 001.06 1.06l1.25-1.25a2 2 0 112.83 2.83l-2.5 2.5a2 2 0 01-2.83 0 .75.75 0 00-1.06 1.06 3.5 3.5 0 004.95 0l2.5-2.5a3.5 3.5 0 00-4.95-4.95l-1.25 1.25zm-4.69 9.64a2 2 0 010-2.83l2.5-2.5a2 2 0 012.83 0 .75.75 0 001.06-1.06 3.5 3.5 0 00-4.95 0l-2.5 2.5a3.5 3.5 0 004.95 4.95l1.25-1.25a.75.75 0 00-1.06-1.06l-1.25 1.25a2 2 0 01-2.83 0z"></path></svg>\n  </a>This tip shows how to pass pipeline input variables to an <code>ExecutiveService</code> adapter in webMethods.</h2><p>The <code>ExecutiveService</code> adapter is used to execute a java service which utilizes the connection from the Integration Server managed connection pool to execute custom SQL statements. The adapter service input include an <code>Object</code> type <code>targetServiceInput</code>. This actually is a IS <code>document</code> type based on my experiment.</p>\n<p>To properly send pipeline variables to the wrapped java service, a wrapper document type needs to be created in a map service to map to the <code>targetServiceInput</code> object in the adapter service and then any properties under this document, will be available to access from the wrapper java service by doing the following:</p>\n<div class="codeblock">\n  <pre>IDataMap idm = new IDataMap(pipeline);\nString foo = idm.getAsString(&quot;bar&quot;);</pre>\n</div><p>This java service has an input of <code>bar</code> defined in its <em>Input</em> tab.</p>\n'}}/>
    </${t}>`}