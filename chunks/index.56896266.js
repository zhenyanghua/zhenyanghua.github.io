import{m as e}from"../index.1da59a96.js";import"./time.daaab1ba.js";import{P as i}from"./index.4bf7c42e.js";export default function(){return e`<${i} ...${{title:"Recursively Move a Directory",date:"2019-01-09 17:00:00"}} summary=${"<p>This article shows one effective implementation that follows the Visitor Pattern to recursively move a directory using Java NIO library.</p>\n"}>
      <article dangerouslySetInnerHTML=${{__html:'<p>This article shows one effective implementation that follows the Visitor Pattern to recursively move a directory using Java NIO library.</p>\n\x3c!-- Excerpt End --\x3e\n\n<div class="codeblock">\n  <pre>public static void move(Path source, Path target) throws IOException {\n\n    class FileMover extends SimpleFileVisitor&lt;Path&gt; {\n        private Path source;\n        private Path target;\n\n        private FileMover(Path source, Path target) {\n            this.source = source;\n            this.target = target;\n        }\n\n        @Override\n        public FileVisitResult visitFile(final Path file, final BasicFileAttributes attrs) throws IOException {\n            Path newFile = target.resolve(source.relativize(file));\n            Files.move(file, newFile,\n                StandardCopyOption.REPLACE_EXISTING);\n            return FileVisitResult.CONTINUE;\n        }\n\n        @Override\n        public FileVisitResult preVisitDirectory(final Path dir, final BasicFileAttributes attrs) throws IOException {\n            Path newDir = target.resolve(source.relativize(dir));\n            try {\n                Files.copy(dir, newDir,\n                    StandardCopyOption.COPY_ATTRIBUTES,\n                    StandardCopyOption.REPLACE_EXISTING);\n            } catch (DirectoryNotEmptyException e) {\n                // ignore and skip\n            }\n            return FileVisitResult.CONTINUE;\n        }\n\n        @Override\n        public FileVisitResult postVisitDirectory(final Path dir, final IOException exc) throws IOException {\n            Path newDir = target.resolve(source.relativize(dir));\n            FileTime time = Files.getLastModifiedTime(dir);\n            Files.setLastModifiedTime(newDir, time);\n            Files.delete(dir);\n            return FileVisitResult.CONTINUE;\n        }\n    }\n\n    FileMover fm = new FileMover(source, target);\n    EnumSet&lt;FileVisitOption&gt; opts = EnumSet.of(FileVisitOption.FOLLOW_LINKS);\n\n    Files.walkFileTree(source, opts, Integer.MAX_VALUE, fm);\n}</pre>\n</div>'}}/>
    </${i}>`}