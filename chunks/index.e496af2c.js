import{m as e}from"../index.f7c0c5b6.js";import"./time.daaab1ba.js";import{P as t}from"./index.ad101fb9.js";export default function(){return e`<${t} ...${{title:"Spring Data Repository Query Precedence Tricks",date:"2018-10-10 17:00:00"}}>
      <article dangerouslySetInnerHTML=${{__html:'<h2>\n  <a id="spring-data-repository-method-is-very-handy-but-it-also-comes-with-its-limitation-especially-when-composed-with-condition-precedence-this-article-shows-one-way-to-work-with-it-and-its-caveats-" class="anchor" aria-hidden="true" href="#spring-data-repository-method-is-very-handy-but-it-also-comes-with-its-limitation-especially-when-composed-with-condition-precedence-this-article-shows-one-way-to-work-with-it-and-its-caveats-">\n    <svg class="icon" viewBox="0 0 16 16" version="1.1" width="16" height="16" aria-hidden="true"><path fill-rule="evenodd" d="M7.775 3.275a.75.75 0 001.06 1.06l1.25-1.25a2 2 0 112.83 2.83l-2.5 2.5a2 2 0 01-2.83 0 .75.75 0 00-1.06 1.06 3.5 3.5 0 004.95 0l2.5-2.5a3.5 3.5 0 00-4.95-4.95l-1.25 1.25zm-4.69 9.64a2 2 0 010-2.83l2.5-2.5a2 2 0 012.83 0 .75.75 0 001.06-1.06 3.5 3.5 0 00-4.95 0l-2.5 2.5a3.5 3.5 0 004.95 4.95l1.25-1.25a.75.75 0 00-1.06-1.06l-1.25 1.25a2 2 0 01-2.83 0z"></path></svg>\n  </a>Spring Data repository method is very handy but it also comes with its limitation, especially when composed with condition precedence. This article shows one way to work with it and its caveats.</h2><h2>\n  <a id="use-case" class="anchor" aria-hidden="true" href="#use-case">\n    <svg class="icon" viewBox="0 0 16 16" version="1.1" width="16" height="16" aria-hidden="true"><path fill-rule="evenodd" d="M7.775 3.275a.75.75 0 001.06 1.06l1.25-1.25a2 2 0 112.83 2.83l-2.5 2.5a2 2 0 01-2.83 0 .75.75 0 00-1.06 1.06 3.5 3.5 0 004.95 0l2.5-2.5a3.5 3.5 0 00-4.95-4.95l-1.25 1.25zm-4.69 9.64a2 2 0 010-2.83l2.5-2.5a2 2 0 012.83 0 .75.75 0 001.06-1.06 3.5 3.5 0 00-4.95 0l-2.5 2.5a3.5 3.5 0 004.95 4.95l1.25-1.25a.75.75 0 00-1.06-1.06l-1.25 1.25a2 2 0 01-2.83 0z"></path></svg>\n  </a>Use Case</h2><p>Given the following type:</p>\n<div class="codeblock">\n  <pre>@Entity\npublic class Book {\n    @Id\n    private Long id;\n    private String title;\n    private String edition;\n\n    // Getters and Setters ...\n}</pre>\n</div><h3>\n  <a id="1-check-if-there-is-any-book-whose-title-or-edition-matches-the-specified-" class="anchor" aria-hidden="true" href="#1-check-if-there-is-any-book-whose-title-or-edition-matches-the-specified-">\n    <svg class="icon" viewBox="0 0 16 16" version="1.1" width="16" height="16" aria-hidden="true"><path fill-rule="evenodd" d="M7.775 3.275a.75.75 0 001.06 1.06l1.25-1.25a2 2 0 112.83 2.83l-2.5 2.5a2 2 0 01-2.83 0 .75.75 0 00-1.06 1.06 3.5 3.5 0 004.95 0l2.5-2.5a3.5 3.5 0 00-4.95-4.95l-1.25 1.25zm-4.69 9.64a2 2 0 010-2.83l2.5-2.5a2 2 0 012.83 0 .75.75 0 001.06-1.06 3.5 3.5 0 00-4.95 0l-2.5 2.5a3.5 3.5 0 004.95 4.95l1.25-1.25a.75.75 0 00-1.06-1.06l-1.25 1.25a2 2 0 01-2.83 0z"></path></svg>\n  </a>1. check if there is any book whose title or edition matches the specified.</h3><p>This one is easy to come up with. We could simply use the keyword <code>Or</code> to compose the query:</p>\n<div class="codeblock">\n  <pre>boolean existsByTitleOrEdition(String title, String edition);</pre>\n</div><h3>\n  <a id="2-check-if-there-is-any-book-whose-title-or-edition-matches-the-specified-and-is-not-itself-" class="anchor" aria-hidden="true" href="#2-check-if-there-is-any-book-whose-title-or-edition-matches-the-specified-and-is-not-itself-">\n    <svg class="icon" viewBox="0 0 16 16" version="1.1" width="16" height="16" aria-hidden="true"><path fill-rule="evenodd" d="M7.775 3.275a.75.75 0 001.06 1.06l1.25-1.25a2 2 0 112.83 2.83l-2.5 2.5a2 2 0 01-2.83 0 .75.75 0 00-1.06 1.06 3.5 3.5 0 004.95 0l2.5-2.5a3.5 3.5 0 00-4.95-4.95l-1.25 1.25zm-4.69 9.64a2 2 0 010-2.83l2.5-2.5a2 2 0 012.83 0 .75.75 0 001.06-1.06 3.5 3.5 0 00-4.95 0l-2.5 2.5a3.5 3.5 0 004.95 4.95l1.25-1.25a.75.75 0 00-1.06-1.06l-1.25 1.25a2 2 0 01-2.83 0z"></path></svg>\n  </a>2. check if there is any book whose title or edition matches the specified and is not itself.</h3><p>This one looks just as easy as the first one, we could have just added another condition and compose with the keyword <code>And</code>:</p>\n<div class="codeblock">\n  <pre>boolean existsByTitleOrEditionAndIdIsNot(\n    String title, String edition, Long id);</pre>\n</div><p>Is that so?</p>\n<p>When this method name is translated to SQL, it reads surprisingly as</p>\n<blockquote>\n<p>test if any book whose title matches the specified\n                     or\n(edition matches the specified and is not itself)</p>\n</blockquote>\n<p>What is the problem?</p>\n<p>The problem is Spring data repository methods doesn&#39;t support precedence with parenthesis. That is why it only honors its default precedence when building the query.</p>\n<h4>\n  <a id="solution-1" class="anchor" aria-hidden="true" href="#solution-1">\n    <svg class="icon" viewBox="0 0 16 16" version="1.1" width="16" height="16" aria-hidden="true"><path fill-rule="evenodd" d="M7.775 3.275a.75.75 0 001.06 1.06l1.25-1.25a2 2 0 112.83 2.83l-2.5 2.5a2 2 0 01-2.83 0 .75.75 0 00-1.06 1.06 3.5 3.5 0 004.95 0l2.5-2.5a3.5 3.5 0 00-4.95-4.95l-1.25 1.25zm-4.69 9.64a2 2 0 010-2.83l2.5-2.5a2 2 0 012.83 0 .75.75 0 001.06-1.06 3.5 3.5 0 00-4.95 0l-2.5 2.5a3.5 3.5 0 004.95 4.95l1.25-1.25a.75.75 0 00-1.06-1.06l-1.25 1.25a2 2 0 01-2.83 0z"></path></svg>\n  </a>Solution 1</h4><p>We could just not use the repository method to build the query, but instead using the <code>@Query</code> or <code>@NamedQuery</code> to build the query with <strong>JPQL</strong>:</p>\n<div class="codeblock">\n  <pre>    @Query(&quot;SELECT CASE WHEN (COUNT(b) &gt; 0) then true else false end FROM Book a&quot;\n        + &quot; WHERE b.id &lt;&gt; :id AND (b.title = :title OR b.edition = :edition)&quot;)\n    boolean existsByTitleOrEditionWithIdIsNot(\n        @Param(&quot;id&quot;) Long id, \n        @Param(&quot;title&quot;) String title, \n        @Param(&quot;edition&quot;) String edition);</pre>\n</div><h4>\n  <a id="solution-2" class="anchor" aria-hidden="true" href="#solution-2">\n    <svg class="icon" viewBox="0 0 16 16" version="1.1" width="16" height="16" aria-hidden="true"><path fill-rule="evenodd" d="M7.775 3.275a.75.75 0 001.06 1.06l1.25-1.25a2 2 0 112.83 2.83l-2.5 2.5a2 2 0 01-2.83 0 .75.75 0 00-1.06 1.06 3.5 3.5 0 004.95 0l2.5-2.5a3.5 3.5 0 00-4.95-4.95l-1.25 1.25zm-4.69 9.64a2 2 0 010-2.83l2.5-2.5a2 2 0 012.83 0 .75.75 0 001.06-1.06 3.5 3.5 0 00-4.95 0l-2.5 2.5a3.5 3.5 0 004.95 4.95l1.25-1.25a.75.75 0 00-1.06-1.06l-1.25 1.25a2 2 0 01-2.83 0z"></path></svg>\n  </a>Solution 2</h4><p>We know that <code>(A or B) and C  &lt;==&gt; (A and C) or (B and C)</code> is true. We could compose the repository method with an extra duplicated or condition to make it work.</p>\n<div class="codeblock">\n  <pre>boolean existsByTitleAndIdIsNotOrEditionAndIdIsNot(\n    String title, Long id1, String edition, Long id2);</pre>\n</div><h4>\n  <a id="caveats" class="anchor" aria-hidden="true" href="#caveats">\n    <svg class="icon" viewBox="0 0 16 16" version="1.1" width="16" height="16" aria-hidden="true"><path fill-rule="evenodd" d="M7.775 3.275a.75.75 0 001.06 1.06l1.25-1.25a2 2 0 112.83 2.83l-2.5 2.5a2 2 0 01-2.83 0 .75.75 0 00-1.06 1.06 3.5 3.5 0 004.95 0l2.5-2.5a3.5 3.5 0 00-4.95-4.95l-1.25 1.25zm-4.69 9.64a2 2 0 010-2.83l2.5-2.5a2 2 0 012.83 0 .75.75 0 001.06-1.06 3.5 3.5 0 00-4.95 0l-2.5 2.5a3.5 3.5 0 004.95 4.95l1.25-1.25a.75.75 0 00-1.06-1.06l-1.25 1.25a2 2 0 01-2.83 0z"></path></svg>\n  </a>Caveats</h4><p>This trick can build queries with precedence without writing any JPQL, but it comes at the cost of verbose -- not just in long and hard to read method name, but also in the method arguments -- notice that the same <code>id</code> is expressed twice with two different method local variable names.</p>\n<h3>\n  <a id="source-code" class="anchor" aria-hidden="true" href="#source-code">\n    <svg class="icon" viewBox="0 0 16 16" version="1.1" width="16" height="16" aria-hidden="true"><path fill-rule="evenodd" d="M7.775 3.275a.75.75 0 001.06 1.06l1.25-1.25a2 2 0 112.83 2.83l-2.5 2.5a2 2 0 01-2.83 0 .75.75 0 00-1.06 1.06 3.5 3.5 0 004.95 0l2.5-2.5a3.5 3.5 0 00-4.95-4.95l-1.25 1.25zm-4.69 9.64a2 2 0 010-2.83l2.5-2.5a2 2 0 012.83 0 .75.75 0 001.06-1.06 3.5 3.5 0 00-4.95 0l-2.5 2.5a3.5 3.5 0 004.95 4.95l1.25-1.25a.75.75 0 00-1.06-1.06l-1.25 1.25a2 2 0 01-2.83 0z"></path></svg>\n  </a>Source Code</h3><div class="codeblock">\n  <pre>@Entity\npublic class Book {\n    @Id\n    private Long id;\n    private String title;\n    private String edition;\n\n    // Getters and Setters ...\n}\n\n@Repository\npublic interface BookRepository extends JpaRepository&lt;Book, Long&gt; {\n    // A or B\n    // test if any book whose title or edition matches the specified\n    boolean existsByTitleOrEdition(String title, String edition);\n\n    // A or (B and C)\n    // test if any book whose \n    //    title matches the specified or \n    //    (edition matches the specified and is not itself)\n    boolean existsByTitleOrEditionAndIdIsNot(\n        String title, String edition, Long id);\n\n    // Solution 1\n    @Query(&quot;SELECT CASE WHEN (COUNT(b) &gt; 0) then true else false end FROM Book a&quot;\n        + &quot; WHERE b.id &lt;&gt; :id AND (b.title = :title OR b.edition = :edition)&quot;)\n    boolean existsByTitleOrEditionWithIdIsNot(\n        @Param(&quot;id&quot;) Long id, \n        @Param(&quot;title&quot;) String title, \n        @Param(&quot;edition&quot;) String edition);\n\n    // Solution 2\n    // (A or B) and C &lt;==&gt; (A and C) or (B and C)\n    // test if any book whose \n    //     (title matches the specified and is not itself) or \n    //     (edition matches the specified and is not itself)\n    boolean existsByTitleAndIdIsNotOrEditionAndIdIsNot(\n        String title, Long id1, String edition, Long id2);\n}</pre>\n</div><h2>\n  <a id="useful-readings" class="anchor" aria-hidden="true" href="#useful-readings">\n    <svg class="icon" viewBox="0 0 16 16" version="1.1" width="16" height="16" aria-hidden="true"><path fill-rule="evenodd" d="M7.775 3.275a.75.75 0 001.06 1.06l1.25-1.25a2 2 0 112.83 2.83l-2.5 2.5a2 2 0 01-2.83 0 .75.75 0 00-1.06 1.06 3.5 3.5 0 004.95 0l2.5-2.5a3.5 3.5 0 00-4.95-4.95l-1.25 1.25zm-4.69 9.64a2 2 0 010-2.83l2.5-2.5a2 2 0 012.83 0 .75.75 0 001.06-1.06 3.5 3.5 0 00-4.95 0l-2.5 2.5a3.5 3.5 0 004.95 4.95l1.25-1.25a.75.75 0 00-1.06-1.06l-1.25 1.25a2 2 0 01-2.83 0z"></path></svg>\n  </a>Useful Readings</h2><ul>\n<li><a href="https://docs.spring.io/spring-data/jpa/docs/2.1.0.RELEASE/reference/html/#repository-query-keywords" target="_blank">Spring Repository query keywords</a></li>\n<li><a href="https://www.baeldung.com/spring-data-jpa-query" target="_blank">Spring Data JPA @Query</a></li>\n</ul>\n'}}/>
    </${t}>`}