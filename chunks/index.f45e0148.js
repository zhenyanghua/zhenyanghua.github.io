import{m as n}from"../index.f7c0c5b6.js";import"./time.daaab1ba.js";import{P as e}from"./index.ad101fb9.js";export default function(){return n`<${e} ...${{title:"Java 8 Time Package and Locale",date:"2018-08-26T17:00:00.000Z"}}>
      <article dangerouslySetInnerHTML=${{__html:'<h2>\n  <a id="java-8-provides-an-extensive-time-computational-package-code-java-time-code-that-is-recommended-for-any-new-code-to-use-because-it-provides-so-many-helper-methods-to-compute-time-and-easily-used-with-code-java-util-locale-code-class-to-support-localization-em-l10n-em-and-internationalization-em-i18n-em-in-this-article-we-will-learn-some-most-useful-operations-using-the-code-java-time-code-package-with-code-java-util-locale-code-class-through-a-scenario-of-a-href-https-www-olympic-org-beijing-2022-target-_blank-beijing-winter-olympic-game-a-opening-day-reminder-" class="anchor" aria-hidden="true" href="#java-8-provides-an-extensive-time-computational-package-code-java-time-code-that-is-recommended-for-any-new-code-to-use-because-it-provides-so-many-helper-methods-to-compute-time-and-easily-used-with-code-java-util-locale-code-class-to-support-localization-em-l10n-em-and-internationalization-em-i18n-em-in-this-article-we-will-learn-some-most-useful-operations-using-the-code-java-time-code-package-with-code-java-util-locale-code-class-through-a-scenario-of-a-href-https-www-olympic-org-beijing-2022-target-_blank-beijing-winter-olympic-game-a-opening-day-reminder-">\n    <svg class="icon" viewBox="0 0 16 16" version="1.1" width="16" height="16" aria-hidden="true"><path fill-rule="evenodd" d="M7.775 3.275a.75.75 0 001.06 1.06l1.25-1.25a2 2 0 112.83 2.83l-2.5 2.5a2 2 0 01-2.83 0 .75.75 0 00-1.06 1.06 3.5 3.5 0 004.95 0l2.5-2.5a3.5 3.5 0 00-4.95-4.95l-1.25 1.25zm-4.69 9.64a2 2 0 010-2.83l2.5-2.5a2 2 0 012.83 0 .75.75 0 001.06-1.06 3.5 3.5 0 00-4.95 0l-2.5 2.5a3.5 3.5 0 004.95 4.95l1.25-1.25a.75.75 0 00-1.06-1.06l-1.25 1.25a2 2 0 01-2.83 0z"></path></svg>\n  </a>Java 8 provides an extensive time computational package -  <code>java.time</code> that is recommended for any new code to use because it provides so many helper methods to compute time and easily used with <code>java.util.Locale</code> class to support localization <em>(l10n)</em> and internationalization <em>(i18n)</em>. In this article, we will learn some most useful operations using the <code>java.time</code> package with <code>java.util.Locale</code> class through a scenario of  <a href="https://www.olympic.org/beijing-2022" target="_blank">Beijing Winter Olympic Game</a> opening day reminder.</h2><p><em>Something to know: China only use one timezone which is standardized as China Standard Time (CST). Shanghai and Beijing thus use the same time.</em></p>\n<div class="codeblock">\n  <pre>import java.time.*;\nimport java.time.format.*;\nimport java.time.temporal.*;\nimport java.util.Locale;\n\npublic class WinterOlympicGames {\n    public static void main(String... args) {\n        LocalDate nowDate = LocalDate.now();\n        LocalTime nowTime = LocalTime.now();\n        LocalDateTime nowDateTime = LocalDateTime.of(nowDate, nowTime);\n        System.out.println(&quot;It&#39;s currently &quot; + nowDateTime + &quot; where I am&quot;);\n\n        LocalDate openDate1 = LocalDate.of(2018, 2, 9);\n        LocalDate openDate2 = LocalDate.parse(&quot;2018-02-09&quot;);\n        System.out.println(&quot;Opening date: &quot; + openDate1 + &quot;, &quot; + openDate2);\n\n        // Local time in PyeongChang\n        LocalTime begins = LocalTime.of(19, 0, 0);\n        LocalTime torchLighting = LocalTime.of(20, 30, 15);\n        System.out.println(&quot;Opening begins at &quot; + begins + \n            &quot; and torch lighting is at &quot; + torchLighting);\n\n        String openingDateTime = &quot;2018-02-09 19:00&quot;;\n        DateTimeFormatter formatter = \n            DateTimeFormatter.ofPattern(&quot;yyyy-MM-dd HH:mm&quot;);\n        LocalDateTime openingDay = \n            LocalDateTime.parse(openingDateTime, formatter);\n        System.out.println(&quot;Opening day: &quot; + openingDay);\n        System.out.println(&quot;Opening day, formatted: &quot; + \n            openingDay.format(\n                DateTimeFormatter.ofPattern(&quot;MM/dd/yyyy HH:mm&quot;)));\n        System.out.println(&quot;China time: &quot; + openingDay.minusHours(1));\n        System.out.println(&quot;Time of Departure from PyeongChang to China: &quot; \n            + openingDay.plusDays(3));\n        System.out.println(&quot;What day of the week is the opening day? &quot; \n            + openingDay.getDayOfWeek());\n\n        // // Get a list of Zone Ids:\n        // ZoneId.getAvailableZoneIds()\n        //  .stream()\n        //  .sorted()\n        //  .filter(x -&gt; x.contains(&quot;Asia&quot;))\n        //  .forEach(x -&gt; System.out.println(x));\n\n        ZonedDateTime zOpeningDateTime = \n            ZonedDateTime.of(openingDay, ZoneId.of(&quot;Asia/Seoul&quot;));\n        System.out.println(&quot;Date and time opening begins with time zone: &quot; \n            + zOpeningDateTime);\n\n\n        ZoneId pyeongChang = ZoneId.of(&quot;Asia/Seoul&quot;);\n        // pyeongChang.getRules() returns a ZoneRules object that has all the\n        // rules about time zones, including daylight savings and standard \n        // time.\n        System.out.println(&quot;Is Daylight Savings in effect at time of &quot; \n            + &quot;opending day in PyeongChang? &quot; \n            + pyeongChang.getRules()\n                .isDaylightSavings(zOpeningDateTime.toInstant()));\n\n        ZonedDateTime followingSundayDayTime = \n            zOpeningDateTime.with(\n                TemporalAdjusters.next(DayOfWeek.SUNDAY));\n        System.out.println(&quot;Sunday following the opending day: &quot; \n            + followingSundayDayTime);\n\n\n        // Next Winter Olympic Games\n        ZonedDateTime  zOpeningBeijing = \n            ZonedDateTime.of(2022, 2, 4, 20, 0, 0, 0, \n                ZoneId.of(&quot;Asia/Shanghai&quot;));\n        System.out.println(&quot;Next Winter Olympic Games in Beijing, &quot; \n            + &quot;date/time in Beijing: &quot; + zOpeningBeijing);\n\n        Period period = Period.ofMonths(1);\n        System.out.println(&quot;Period is &quot; + period);\n        ZonedDateTime reminder = zOpeningBeijing.minus(period);\n        System.out.println(&quot;DateTime of 1 month reminder: &quot; + reminder);\n\n        System.out.println(&quot;Local DateTime (Beijing) of reminder: &quot; \n            + reminder.toLocalDateTime());\n\n        // Notice the its winter standard time in Ohio, hence 13 hours offset.\n        System.out.println(&quot;Zoned DateTime (Ohio) of reminder: &quot; \n            + reminder.withZoneSameInstant(ZoneId.of(&quot;US/Eastern&quot;)));\n\n        // Local in Beijing\n        begins = LocalTime.of(20, 0, 0);\n        torchLighting = LocalTime.of(22, 10, 12);\n        System.out.println(&quot;Opening begins at &quot; + begins \n            + &quot; and torch lighting is at &quot; + torchLighting);\n\n        long betweenMins = ChronoUnit.MINUTES.between(begins, torchLighting);\n        System.out.println(&quot;Minutes between begin and and torch lighting: &quot; \n            + betweenMins);\n\n        Duration betweenDuration = Duration.ofMinutes(betweenMins);\n        System.out.println(&quot;Duration: &quot; + betweenDuration);\n\n        LocalTime torchLightingBegins = begins.plus(betweenDuration);\n        System.out.println(&quot;Torching Lighting begins, computed: &quot; \n            + torchLightingBegins);\n\n        // GMT\n        zOpeningBeijing = \n            ZonedDateTime.of(2022, 2, 4, 20, 0, 0, 0, \n                ZoneId.of(&quot;Asia/Shanghai&quot;));\n        Instant openingBeijingInstant = zOpeningBeijing.toInstant();\n        System.out.println(&quot;Beijing&#39;s opening day instant is: &quot; \n            + openingBeijingInstant);\n\n        Instant nowInstant = Instant.now();\n        openingBeijingInstant = zOpeningBeijing.toInstant();\n        long minsBetween = \n            ChronoUnit.MINUTES.between(nowInstant, openingBeijingInstant);\n        Duration durationBetweenInstants = Duration.ofMinutes(minsBetween);\n        System.out.println(&quot;Minutes between &quot; + minsBetween\n            + &quot;, is duration &quot; + durationBetweenInstants);\n\n        long daysBetween = \n            ChronoUnit.DAYS.between(nowInstant, openingBeijingInstant);\n        Period periodBetweenInstants = Period.ofDays((int)daysBetween);\n        System.out.println(&quot;Days between &quot; + daysBetween\n            + &quot;, is period &quot; + periodBetweenInstants);\n\n        Instant now = Instant.now();\n        System.out.println(&quot;Seconds since epoch: &quot; + now.getEpochSecond());\n\n        System.out.println(&quot;DateTime of 3-day remnder: &quot; \n            + zOpeningBeijing.minus(Period.ofDays(3)));\n        System.out.println(&quot;Day of week for 3-day reminder: &quot; \n            + zOpeningBeijing.minus(Period.ofDays(3)).getDayOfWeek());\n\n        ZonedDateTime zOhio = \n            zOpeningBeijing.withZoneSameInstant(ZoneId.of(&quot;US/Eastern&quot;));\n        System.out.println(&quot;Beijing Opening begins at &quot; \n            + zOhio + &quot; US Eastern time&quot;);\n        System.out.println(&quot;Call frinds in China 1 hour before opening: &quot; \n            + zOhio.minusHours(1) + &quot;, &quot; \n            + zOpeningBeijing.minusHours(1) + &quot; Beijing time&quot;);\n\n        System.out.println(&quot;Is Beijing Winter Olympic Games still in the&quot; \n            + &quot; future? &quot; + ZonedDateTime.now().isBefore(zOpeningBeijing));\n\n        System.out.println(&quot;Is 2022 a leap year? &quot; \n            + zOpeningBeijing.toLocalDate().isLeapYear());\n        System.out.println(&quot;Is 2022 a leap year? &quot; + Year.of(2022).isLeap());\n\n        System.out.println(&quot;Opening date/time written for Frinds in Ohio: &quot; \n            + zOhio.format(\n                DateTimeFormatter.ofPattern(&quot;MM/dd/yyyy hh:mm a&quot;)));\n\n        System.out.println(&quot;Opening date/time in China Locale: &quot;\n            + zOpeningBeijing.format(\n                DateTimeFormatter.ofLocalizedDateTime(FormatStyle.SHORT)\n                    .withLocale(Locale.CHINA)));\n\n        // Usage with Locale\n        Locale myLocale = Locale.getDefault();\n        System.out.println(&quot;My locale: &quot; + myLocale);\n        LocalDateTime aDateTime = LocalDateTime.of(2022, 2, 4, 20, 0, 0);\n        System.out.println(&quot;The date and time: &quot;\n            + aDateTime.format(\n                DateTimeFormatter.ofLocalizedDateTime(FormatStyle.SHORT)));\n        ZonedDateTime zDateTime = \n            ZonedDateTime.of(aDateTime, ZoneId.of(&quot;Asia/Shanghai&quot;));\n        Locale locZH = new Locale(&quot;zh&quot;); // Chinese\n        Locale locCN = new Locale(&quot;zh&quot;, &quot;CN&quot;); // Chinese, China\n        Locale locUK = new Locale(&quot;en&quot;, &quot;UK&quot;); // English, UK\n        System.out.println(&quot;China (LONG) &quot;\n            + zDateTime.format(\n                DateTimeFormatter.ofLocalizedDateTime(FormatStyle.LONG)\n                    .withLocale(locCN)));\n        System.out.println(&quot;UK (LONG) &quot;\n            + zDateTime.format(\n                DateTimeFormatter.ofLocalizedDateTime(FormatStyle.LONG)\n                    .withLocale(locUK)));\n        System.out.println(&quot;China, country: &quot; + locCN.getDisplayCountry());\n        System.out.println(&quot;China, country, local: &quot; \n            + locCN.getDisplayCountry(locCN));\n        System.out.println(&quot;UK, country: &quot; + locUK.getDisplayCountry());\n        // fallback to English when there is no Chinese name for UK\n        System.out.println(&quot;UK, country, local in China: &quot; \n            + locUK.getDisplayCountry(locCN)); \n    }\n}</pre>\n</div>'}}/>
    </${e}>`}