"registerProperty"in CSS&&(CSS.registerProperty({name:"--leaf-size",syntax:"<number>",inherits:!1,initialValue:16}),CSS.registerProperty({name:"--leaf-color",syntax:"<color>",inherits:!0,initialValue:"#73ce8f"}),CSS.registerProperty({name:"--leaf-variance",syntax:"left | around",inherits:!1,initialValue:"left"})),(()=>{const e=URL.createObjectURL(new Blob(["\nconst randomInt = (max) => Math.floor(Math.random() * Math.floor(max));\n\nclass LeafPainter {\n  static get inputProperties() {\n    return [\n      '--leaf-size',\n      '--leaf-color',\n      '--leaf-variance'\n    ];\n  }\n\n  get leafSize() {\n    return this._leafSize;\n  }\n\n  set leafSize(size) {\n    this._leafSize = size;\n  }\n\n  get leafColor() {\n    return this._leafColor;\n  }\n\n  set leafColor(color) {\n    this._leafColor = color;\n  }\n\n  get leafVariance() {\n    return this._leafVariance;\n  }\n\n  set leafVariance(variance) {\n    this._leafVariance = variance;\n  }\n\n  /**\n   * The starting point of the vine in the canvas\n   * @return {number}\n   */\n  get x() {\n    return this.leafSize * 2;\n  }\n\n  /**\n   * The distance between the border the vine grow along and the other side of the vine.\n   * @return {number}\n   */\n  get width() {\n    return this.x + this.leafSize * 2;\n  }\n\n  /**\n   * vine directions\n   * v>>>>>>^\n   * v      ^\n   * v      ^\n   * v<<<<<<^\n   */\n  paint(ctx, geom, properties) {\n    this.leafSize = parseInt(properties.get('--leaf-size')) || 16;\n    this.leafColor = (properties.get('--leaf-color') || '#73ce8f').toString().trim();\n    this.leafVariance = (properties.get('--leaf-variance') || 'left').toString().trim();\n\n    // left\n    this.paintVine(ctx, properties, geom.height, 0, [0, 0]);\n\n    if (this.leafVariance === 'around') {\n      // top\n      this.paintVine(ctx, properties, geom.width, -90, [-this.width, 0]);\n      // // right\n      this.paintVine(ctx, properties, geom.height, -180, [-geom.width, -geom.height]);\n      // // bottom\n      this.paintVine(ctx, properties, geom.width, -270, [geom.height - this.width, -geom.width]);\n    }\n  }\n\n\n  leaf(ctx, x, y, size, dir) {\n    ctx.save();\n    ctx.translate(x, y);\n    ctx.scale(size, size);\n    ctx.beginPath();\n    ctx.moveTo(dir, -0.7);\n    ctx.bezierCurveTo(dir, -0.7, 0.4 * dir, -1, 0, 0);\n    ctx.bezierCurveTo(0, 0, dir, 0.4, dir, -0.7);\n    ctx.fill();\n    ctx.restore();\n  }\n\n  vine(ctx, x, numLeaves, leafSize, length, angle) {\n    const isAround = this.leafVariance === 'around';\n\n    ctx.beginPath();\n    ctx.moveTo(x, isAround ? x + leafSize : 0);\n    if (isAround && (Math.abs(angle) === 90 || Math.abs(angle) === 270)) { // top or bottom\n      ctx.quadraticCurveTo(x, x, x - leafSize, x);\n      ctx.moveTo(x, x + leafSize);\n    }\n    ctx.lineTo(x, isAround ? length - x - leafSize : length);\n    if (isAround && (angle === 0 || Math.abs(angle) === 180)) { // left or right\n      ctx.quadraticCurveTo(x, length - x, x + leafSize, length - x);\n    }\n    ctx.stroke();\n    const gap = length / numLeaves;\n    let direction = 1;\n    for (let i = 0; i < numLeaves; i++) {\n      const r = randomInt(gap);\n      const y = gap * i + r;\n      if (!isAround || (isAround && y > x && y < length - x)) {\n        this.leaf(ctx, x, y, leafSize, direction);\n        direction = -direction;\n      }\n    }\n  }\n\n\n  paintVine(ctx, properties, length, angle, origin) {\n    const numLeaves = Math.floor(length / this.leafSize) * 1.5;\n\n    ctx.strokeStyle = ctx.fillStyle = this.leafColor;\n\n    ctx.save();\n    ctx.rotate(angle * Math.PI / 180);\n    ctx.translate(...origin);\n    this.vine(ctx, this.x, numLeaves, this.leafSize, length, angle);\n    ctx.restore();\n  }\n\n}\n\nregisterPaint('leaf', LeafPainter);\n"],{type:"application/javascript"}));window.CSS.paintWorklet.addModule(e)})();