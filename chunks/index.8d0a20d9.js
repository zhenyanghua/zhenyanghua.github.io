import{m as e}from"../index.38ef91ca.js";import"./time.daaab1ba.js";import{P as t}from"./index.8a0fdf57.js";export default function(){return e`<${t} ...${{title:"Serialize Timestamp To EpochSecond with Jackson",date:"2018-11-09 17:00:00"}}>
      <article dangerouslySetInnerHTML=${{__html:'<h2>\n  <a id="some-rest-api-only-takes-a-code-long-code-as-its-date-field-such-as-code-esrifieldtypedate-code-from-arcgis-server-rest-api-but-with-the-rich-functionality-the-java-8-time-api-provides-it-would-be-silly-to-use-code-long-code-as-the-type-for-our-object-modeling-this-tip-shows-how-to-solve-this-problem-" class="anchor" aria-hidden="true" href="#some-rest-api-only-takes-a-code-long-code-as-its-date-field-such-as-code-esrifieldtypedate-code-from-arcgis-server-rest-api-but-with-the-rich-functionality-the-java-8-time-api-provides-it-would-be-silly-to-use-code-long-code-as-the-type-for-our-object-modeling-this-tip-shows-how-to-solve-this-problem-">\n    <svg class="icon" viewBox="0 0 16 16" version="1.1" width="16" height="16" aria-hidden="true"><path fill-rule="evenodd" d="M7.775 3.275a.75.75 0 001.06 1.06l1.25-1.25a2 2 0 112.83 2.83l-2.5 2.5a2 2 0 01-2.83 0 .75.75 0 00-1.06 1.06 3.5 3.5 0 004.95 0l2.5-2.5a3.5 3.5 0 00-4.95-4.95l-1.25 1.25zm-4.69 9.64a2 2 0 010-2.83l2.5-2.5a2 2 0 012.83 0 .75.75 0 001.06-1.06 3.5 3.5 0 00-4.95 0l-2.5 2.5a3.5 3.5 0 004.95 4.95l1.25-1.25a.75.75 0 00-1.06-1.06l-1.25 1.25a2 2 0 01-2.83 0z"></path></svg>\n  </a>Some REST API only takes a <code>long</code> as its Date field, such as <code>esriFieldTypeDate</code> from ArcGIS Server Rest API. But with the rich functionality, the Java 8 time API provides, it would be silly to use <code>long</code> as the type for our object modeling. This tip shows how to solve this problem.</h2><p>I started with using <code>LocalDateTime</code> as the type of the timestamp field I want to use`, but Jackson simply serialize it as it does with any other fields, but what I really want is to serialize it to the epoch second.</p>\n<p>Jackson does provide a new library that supports the JSR 310 which is the date and time API. to use that dependency, we need to add the following to maven:</p>\n<div class="codeblock">\n  <pre>&lt;dependency&gt;\n    &lt;groupId&gt;com.fasterxml.jackson.datatype&lt;/groupId&gt;\n    &lt;artifactId&gt;jackson-datatype-jsr310&lt;/artifactId&gt;\n&lt;/dependency&gt;</pre>\n</div><p>At this point, the job is not done yet. The <code>LocalDateTime</code> is not an option because it takes a timezone information to convert to the epoch second, unless we provide it, otherwise, we should use the <code>Instant</code> type instead. The <code>Instant</code> class provides the epoch second and the nanosecond of that second. We need to disable the nanosecond from the serialization process so we could get the epoch second.</p>\n<p>The following will do the job by using the new Jackson jsr310 dependency we added and disabling the nanosecond in the serialization process.</p>\n<div class="codeblock">\n  <pre>ObjectMapper mapper = new ObjectMapper()\n    .registerModule(new JavaTimeModule())\n    .disable(SerializationFeature.WRITE_DATE_TIMESTAMPS_AS_NANOSECONDS);</pre>\n</div>'}}/>
    </${t}>`}